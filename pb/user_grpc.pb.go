// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.0
// source: proto/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserGrpcHandler_GetUserById_FullMethodName     = "/UserGrpcHandler/GetUserById"
	UserGrpcHandler_VerifyAccessKey_FullMethodName = "/UserGrpcHandler/VerifyAccessKey"
	UserGrpcHandler_GetUserByIds_FullMethodName    = "/UserGrpcHandler/GetUserByIds"
)

// UserGrpcHandlerClient is the client API for UserGrpcHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGrpcHandlerClient interface {
	GetUserById(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	VerifyAccessKey(ctx context.Context, in *VerifyAccessKeyRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetUserByIds(ctx context.Context, in *GetUserByIdsRequest, opts ...grpc.CallOption) (*GetUserByIdsResponse, error)
}

type userGrpcHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGrpcHandlerClient(cc grpc.ClientConnInterface) UserGrpcHandlerClient {
	return &userGrpcHandlerClient{cc}
}

func (c *userGrpcHandlerClient) GetUserById(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserGrpcHandler_GetUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcHandlerClient) VerifyAccessKey(ctx context.Context, in *VerifyAccessKeyRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, UserGrpcHandler_VerifyAccessKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcHandlerClient) GetUserByIds(ctx context.Context, in *GetUserByIdsRequest, opts ...grpc.CallOption) (*GetUserByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserByIdsResponse)
	err := c.cc.Invoke(ctx, UserGrpcHandler_GetUserByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGrpcHandlerServer is the server API for UserGrpcHandler service.
// All implementations must embed UnimplementedUserGrpcHandlerServer
// for forward compatibility.
type UserGrpcHandlerServer interface {
	GetUserById(context.Context, *GetUserRequest) (*GetUserResponse, error)
	VerifyAccessKey(context.Context, *VerifyAccessKeyRequest) (*GetUserResponse, error)
	GetUserByIds(context.Context, *GetUserByIdsRequest) (*GetUserByIdsResponse, error)
	mustEmbedUnimplementedUserGrpcHandlerServer()
}

// UnimplementedUserGrpcHandlerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserGrpcHandlerServer struct{}

func (UnimplementedUserGrpcHandlerServer) GetUserById(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserGrpcHandlerServer) VerifyAccessKey(context.Context, *VerifyAccessKeyRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccessKey not implemented")
}
func (UnimplementedUserGrpcHandlerServer) GetUserByIds(context.Context, *GetUserByIdsRequest) (*GetUserByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIds not implemented")
}
func (UnimplementedUserGrpcHandlerServer) mustEmbedUnimplementedUserGrpcHandlerServer() {}
func (UnimplementedUserGrpcHandlerServer) testEmbeddedByValue()                         {}

// UnsafeUserGrpcHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGrpcHandlerServer will
// result in compilation errors.
type UnsafeUserGrpcHandlerServer interface {
	mustEmbedUnimplementedUserGrpcHandlerServer()
}

func RegisterUserGrpcHandlerServer(s grpc.ServiceRegistrar, srv UserGrpcHandlerServer) {
	// If the following call pancis, it indicates UnimplementedUserGrpcHandlerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserGrpcHandler_ServiceDesc, srv)
}

func _UserGrpcHandler_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcHandlerServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcHandler_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcHandlerServer).GetUserById(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcHandler_VerifyAccessKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcHandlerServer).VerifyAccessKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcHandler_VerifyAccessKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcHandlerServer).VerifyAccessKey(ctx, req.(*VerifyAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpcHandler_GetUserByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcHandlerServer).GetUserByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserGrpcHandler_GetUserByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcHandlerServer).GetUserByIds(ctx, req.(*GetUserByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGrpcHandler_ServiceDesc is the grpc.ServiceDesc for UserGrpcHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGrpcHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserGrpcHandler",
	HandlerType: (*UserGrpcHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _UserGrpcHandler_GetUserById_Handler,
		},
		{
			MethodName: "VerifyAccessKey",
			Handler:    _UserGrpcHandler_VerifyAccessKey_Handler,
		},
		{
			MethodName: "GetUserByIds",
			Handler:    _UserGrpcHandler_GetUserByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user.proto",
}
